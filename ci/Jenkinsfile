@Library('jenlib') _

node {
	try {
		cleanWs()

		stage('Checkout') {
			checkout scm
		}

		stage('Build and Test') {
			withMaven(maven: 'M3',
			          jdk: 'J17',
			          mavenLocalRepo: '.repository',
			          options: [artifactsPublisher(disabled: true),
			                    openTasksPublisher(disabled: true),
			                    // we need more jacoco options than available here
			                    jacocoPublisher(disabled: true)]) {

				// Build and run tests
				sh "mvn clean test"
			}

			// Coverage reports
			recordCoverage(
					tools: [
							[pattern: 'target/site/jacoco/jacoco.xml']
					],
					qualityGates: [
							[metric: 'LINE', threshold: 100.0]
					],
					failOnError: true,
			)
		}

		stage('Build/Deploy Documentation') {
			withMaven(maven: 'M3',
			          jdk: 'J17',
			          mavenLocalRepo: '.repository',
			          options: [artifactsPublisher(disabled: true),
			                    openTasksPublisher(disabled: true),
			                    jacocoPublisher(disabled: true)]) {
				sh "mvn gplus:generateStubs gplus:groovydoc"
			}

			publishHTML([allowMissing         : false,
			             alwaysLinkToLastBuild: false,
			             keepAll              : false,
			             reportDir            : 'target/gapidocs',
			             reportFiles          : 'index.html',
			             reportName           : 'Jenlib Documentation',
			             reportTitles         : 'Jenlib Documentation'])
		}
	} catch (Throwable t) {
		notifyFailure(mattermostChannel: "#softies")
		throw t
	} finally {
		cleanWs()
	}

	// Some Jenkins steps fail a build without raising (e.g. archiveArtifacts)
	if (currentBuild.currentResult != "SUCCESS") {
		notifyFailure(mattermostChannel: "#softies")
	}
}
